#!/bin/sh

# 
#
# By venice
# 2021-01-12 First release
# 2021-01-15 Adding debug to /tmp/tty2oled, device check else part
# 2021-01-16 Change send command "echo -ne ${newcore} >" to "echo ${newcore} >" without -ne to send "\n" (newline)
#            Arduino uses now "Serial.readStringUntil('\n');"
#            Feels more responsive as Serial Read on Arduino is not waitung for the timeout (1000ms)
#            Add "raw" to tty Parameter (see stty manpage)
# 2021-01-17 Add check for readable file "/tmp/CORENAME"
# 2021-01-19 Add "First Transmission" to clear send buffer (Preventing  weird issues after PowerOn)
# 2021-02-07 Changed Speed from 9600 to 57600
# 2021-02-14 Change Timed Loop to " inotifywait -e modify "/tmp/CORENAME" ".
#            Makes it much more responsive :-)
# 2021-03-29 USB Transfer realized by ojaksch, many thanks.
#            Modified Arduino Sketch and "tty2oled" for the USB Version of tty2oled.
#            All XBM must be stored on the MiSTer in the folder "/media/fat/tty2oledpics".
#            Instead of sending the Corename the Content of the XBM is send if an XBM exists. Done with the function "senddata".
#            "senddata" checks for an existing Picture-Folder and if the Folder exists the Picture-Data (if found) or the Corename are sent.
#            If the Folder does not exist, it's assumed the "SD Version" is used and only the corename is sent. 
#            Serial Interface set to 115200 Baud now.
# 2021-04-12 Added an INI file
# 2021-05-05 Added sending Contrast Value
# 2021-05-14 Adding Command Line Parameter for Testing
#            Parameter 1: /dev/ttyUSBx Device 
#            Parameter 1: SD or USB Mode 
#            Parameter 3: Baudrate
#            Example: /usr/bin/tty2oled /dev/ttyUSB1 
#            Example: /usr/bin/tty2oled /dev/ttyUSB1 SD 
#            Example: /usr/bin/tty2oled /dev/ttyUSB1 USB 921600
#
#


. /media/fat/Scripts/tty2oled.ini

# Debug function
dbug() {
  if [ "${debug}" = "true" ]; then
    if [ ! -e ${debugfile} ]; then						# log file not (!) exists (-e) create it
      echo "---------- tty2oled Debuglog ----------" > ${debugfile}
    fi 
    echo "${1}" >> ${debugfile}							# output debug text
  fi
}

# Send-Contrast-Data function
sendcontrast() {
  echo "att" > ${TTYDEV}                                                    # Send an "att" to the MiSTer annoucing another Command
  sleep ${WAITSECS}                                                         # sleep needed here ?!
  echo "CONTRAST" > ${TTYDEV}                                               # Send "CONTRAST" annoucing the OLED Contrast Data as next
  sleep ${WAITSECS}                                                         # sleep needed here ?!
  echo ${CONTRAST} > ${TTYDEV}                                              # Send Contrast Value
}


# USB Send-Picture-Data function
senddata() {
  if [ "${USBMODE}" = "yes" ]; then						# Check the tty2xxx mode
    if [ -f "${picturefolder}/${1}.xbm" ]; then					# Lookup for an existing XBM and proceed
      echo "att" > ${TTYDEV}							# Send an "att" to the MiSTer annoucing another Command
      sleep ${WAITSECS}								# sleep needed here ?!
      echo "CORECHANGE" > ${TTYDEV}						# Send "CORECHANGE" annoucing XBM Data to the ESP/Arduino
      sleep ${WAITSECS}								# sleep needed here ?!
      tail -n +4 "${picturefolder}/${1}.xbm" | xxd -r -p > ${TTYDEV}		# The Magic, send the Picture-Data up from Line 4 and process them with xxd
    else									# No Picture available!
      echo "${1}" > ${TTYDEV}							# Send just the CORENAME
    fi										# End if Picture check
  else 										# SD/Standard Mode ? Just send the Corename
    echo "${1}" > ${TTYDEV}							# Instruct the device to load the appropriate picture from SD card
  fi
}


# ** Main **
if [ "${#}" -ge 1 ]; then                                                       # At least one Command Line Parameter given
  echo "Using Command Line Parameter"                                           # Some Output
  TTYDEV=${1}                                                                   # Set TTYDEV with Parameter 1
  if [ -n "${2}" ]; then                                                        # Parameter 2 SD or USB Mode
    if [ "${2}" = "SD" ]; then                                                  # Parameter 2 = "SD" ?
      USBMODE="no"                                                              # Un-Set USBMODE
    fi                                                                          # end if SD Mode
    if [ "${2}" = "USB" ]; then                                                 # Parameter 2 = "USB" ?
      USBMODE="yes"                                                             # Set USBMODE
    fi                                                                          # end if USB Mode
  fi                                                                            # end if Parameter 2
  if [ -n "${3}" ]; then                                                        # Parameter 3 Baudrate
    BAUDRATE=${3}                                                               # Set Baudrate
  fi                                                                            # end if Parameter 3
  echo "Using Interface: ${TTYDEV} with ${BAUDRATE} Baud"                       # Device Output
  echo "USBMODE: ${USBMODE}"                                                    # Mode Output
fi                                                                              # end if command line Parameter 


if [ -c "${TTYDEV}" ]; then							# check for tty device
  echo "${TTYDEV} detected, setting Parameter."					# some output
  dbug "${TTYDEV} detected, setting Parameter."					# some debug output
  stty -F ${TTYDEV} ${TTYPARAM}							# set tty parameter
  sleep ${WAITSECS}								# sleep needed here ?!
  echo "QWERTZ" > ${TTYDEV}							# First Transmission to clear serial send buffer
  dbug "Send QWERTZ as first transmission"					# some debug output
  sleep ${WAITSECS}								# sleep needed here ?!
  sendcontrast
  while true; do								# main loop
    if [ -r ${corenamefile} ]; then						# proceed if file exists and is readable (-r)
      newcore=$(cat ${corenamefile})						# get CORENAME
      echo "Read CORENAME: -${newcore}-"					# some output
      dbug "Read CORENAME: -${newcore}-"					# some debug output
      if [ "${newcore}" != "${oldcore}" ]; then					# proceed only if Core has changed
	echo "Send -${newcore}- to ${TTYDEV}."					# some output
	dbug "Send -${newcore}- to ${TTYDEV}."					# some debug output
	senddata ${newcore}							# The "Magic"
	oldcore=${newcore}							# update oldcore variable
      fi									# end if core check
      inotifywait -e modify "${corenamefile}"					# wait here for next change of corename
    else									# CORENAME file not found
     echo "File ${corenamefile} not found!"					# some output
     dbug "File ${corenamefile} not found!"					# some debug output
    fi										# end if /tmp/CORENAME check
  done										# end while
else										# no tty detected
  echo "No ${TTYDEV} Device detected, abort."					# some output
  dbug "No ${TTYDEV} Device detected, abort."					# some debug output
fi										# end if tty check
# ** End Main **
